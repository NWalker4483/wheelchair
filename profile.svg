<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="554" onload="init(evt)" viewBox="0 0 1200 554" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="554" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python3.7 detector.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="543.00"> </text><svg id="frames" x="10" width="1180" total_samples="2202"><g><title>&lt;module&gt; (numpy/lib/__init__.py:25) (3 samples, 0.14%)</title><rect x="0.0454%" y="436" width="0.1362%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="3"/><text x="0.2954%" y="446.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="0.0454%" y="452" width="0.1362%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="3"/><text x="0.2954%" y="462.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="0.0454%" y="468" width="0.1362%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="3"/><text x="0.2954%" y="478.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="0.0454%" y="484" width="0.1362%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.2954%" y="494.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="0.0454%" y="500" width="0.1362%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="3"/><text x="0.2954%" y="510.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="0.0454%" y="516" width="0.1362%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="0.2954%" y="526.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:153) (4 samples, 0.18%)</title><rect x="0.0454%" y="308" width="0.1817%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="4"/><text x="0.2954%" y="318.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (4 samples, 0.18%)</title><rect x="0.0454%" y="324" width="0.1817%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="4"/><text x="0.2954%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="0.0454%" y="340" width="0.1817%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="4"/><text x="0.2954%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (4 samples, 0.18%)</title><rect x="0.0454%" y="356" width="0.1817%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="4"/><text x="0.2954%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (4 samples, 0.18%)</title><rect x="0.0454%" y="372" width="0.1817%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="4"/><text x="0.2954%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (4 samples, 0.18%)</title><rect x="0.0454%" y="388" width="0.1817%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="4"/><text x="0.2954%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (4 samples, 0.18%)</title><rect x="0.0454%" y="404" width="0.1817%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="4"/><text x="0.2954%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (4 samples, 0.18%)</title><rect x="0.0454%" y="420" width="0.1817%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="4"/><text x="0.2954%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (7 samples, 0.32%)</title><rect x="0.0000%" y="100" width="0.3179%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="7"/><text x="0.2500%" y="110.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.32%)</title><rect x="0.0000%" y="116" width="0.3179%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="7"/><text x="0.2500%" y="126.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.32%)</title><rect x="0.0000%" y="132" width="0.3179%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="7"/><text x="0.2500%" y="142.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.32%)</title><rect x="0.0000%" y="148" width="0.3179%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="7"/><text x="0.2500%" y="158.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.32%)</title><rect x="0.0000%" y="164" width="0.3179%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="7"/><text x="0.2500%" y="174.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.32%)</title><rect x="0.0000%" y="180" width="0.3179%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="7"/><text x="0.2500%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.32%)</title><rect x="0.0000%" y="196" width="0.3179%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="7"/><text x="0.2500%" y="206.50"></text></g><g><title>&lt;module&gt; (utils/__init__.py:4) (7 samples, 0.32%)</title><rect x="0.0000%" y="212" width="0.3179%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="7"/><text x="0.2500%" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (7 samples, 0.32%)</title><rect x="0.0000%" y="228" width="0.3179%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="7"/><text x="0.2500%" y="238.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (7 samples, 0.32%)</title><rect x="0.0000%" y="244" width="0.3179%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="7"/><text x="0.2500%" y="254.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (7 samples, 0.32%)</title><rect x="0.0000%" y="260" width="0.3179%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="7"/><text x="0.2500%" y="270.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (7 samples, 0.32%)</title><rect x="0.0000%" y="276" width="0.3179%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="7"/><text x="0.2500%" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (7 samples, 0.32%)</title><rect x="0.0000%" y="292" width="0.3179%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="7"/><text x="0.2500%" y="302.50"></text></g><g><title>&lt;module&gt; (detector.py:2) (9 samples, 0.41%)</title><rect x="0.0000%" y="68" width="0.4087%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="9"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (9 samples, 0.41%)</title><rect x="0.0000%" y="84" width="0.4087%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="9"/><text x="0.2500%" y="94.50"></text></g><g><title>&lt;module&gt; (detector.py:4) (3 samples, 0.14%)</title><rect x="0.4087%" y="68" width="0.1362%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="3"/><text x="0.6587%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="0.4087%" y="84" width="0.1362%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="3"/><text x="0.6587%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (3 samples, 0.14%)</title><rect x="0.4087%" y="100" width="0.1362%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="3"/><text x="0.6587%" y="110.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="0.4087%" y="116" width="0.1362%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="3"/><text x="0.6587%" y="126.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="0.4087%" y="132" width="0.1362%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="3"/><text x="0.6587%" y="142.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="0.4087%" y="148" width="0.1362%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="3"/><text x="0.6587%" y="158.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="0.4087%" y="164" width="0.1362%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="3"/><text x="0.6587%" y="174.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="0.4087%" y="180" width="0.1362%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="3"/><text x="0.6587%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="0.4087%" y="196" width="0.1362%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="3"/><text x="0.6587%" y="206.50"></text></g><g><title>&lt;module&gt; (imutils/__init__.py:8) (3 samples, 0.14%)</title><rect x="0.4087%" y="212" width="0.1362%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="3"/><text x="0.6587%" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="0.4087%" y="228" width="0.1362%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="3"/><text x="0.6587%" y="238.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="0.4087%" y="244" width="0.1362%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="3"/><text x="0.6587%" y="254.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="0.4087%" y="260" width="0.1362%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="3"/><text x="0.6587%" y="270.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="0.4087%" y="276" width="0.1362%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="3"/><text x="0.6587%" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="0.4087%" y="292" width="0.1362%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="3"/><text x="0.6587%" y="302.50"></text></g><g><title>&lt;module&gt; (imutils/convenience.py:15) (3 samples, 0.14%)</title><rect x="0.4087%" y="308" width="0.1362%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="3"/><text x="0.6587%" y="318.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (3 samples, 0.14%)</title><rect x="0.4087%" y="324" width="0.1362%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="3"/><text x="0.6587%" y="334.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (3 samples, 0.14%)</title><rect x="0.4087%" y="340" width="0.1362%" height="15" fill="rgb(218,138,4)" fg:x="9" fg:w="3"/><text x="0.6587%" y="350.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (3 samples, 0.14%)</title><rect x="0.4087%" y="356" width="0.1362%" height="15" fill="rgb(250,191,14)" fg:x="9" fg:w="3"/><text x="0.6587%" y="366.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (3 samples, 0.14%)</title><rect x="0.4087%" y="372" width="0.1362%" height="15" fill="rgb(239,60,40)" fg:x="9" fg:w="3"/><text x="0.6587%" y="382.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (3 samples, 0.14%)</title><rect x="0.4087%" y="388" width="0.1362%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="3"/><text x="0.6587%" y="398.50"></text></g><g><title>&lt;module&gt; (detector.py:491) (4 samples, 0.18%)</title><rect x="0.5450%" y="68" width="0.1817%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="4"/><text x="0.7950%" y="78.50"></text></g><g><title>__init__ (detector.py:41) (3 samples, 0.14%)</title><rect x="0.5904%" y="84" width="0.1362%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="3"/><text x="0.8404%" y="94.50"></text></g><g><title>readCameraFeed (detector.py:352) (90 samples, 4.09%)</title><rect x="0.7266%" y="100" width="4.0872%" height="15" fill="rgb(247,123,22)" fg:x="16" fg:w="90"/><text x="0.9766%" y="110.50">read..</text></g><g><title>readCameraFeed (detector.py:357) (33 samples, 1.50%)</title><rect x="4.9046%" y="100" width="1.4986%" height="15" fill="rgb(231,138,38)" fg:x="108" fg:w="33"/><text x="5.1546%" y="110.50"></text></g><g><title>resize (imutils/convenience.py:91) (30 samples, 1.36%)</title><rect x="5.0409%" y="116" width="1.3624%" height="15" fill="rgb(231,145,46)" fg:x="111" fg:w="30"/><text x="5.2909%" y="126.50"></text></g><g><title>readCameraFeed (detector.py:361) (12 samples, 0.54%)</title><rect x="6.4033%" y="100" width="0.5450%" height="15" fill="rgb(251,118,11)" fg:x="141" fg:w="12"/><text x="6.6533%" y="110.50"></text></g><g><title>resize (imutils/convenience.py:91) (11 samples, 0.50%)</title><rect x="6.4487%" y="116" width="0.4995%" height="15" fill="rgb(217,147,25)" fg:x="142" fg:w="11"/><text x="6.6987%" y="126.50"></text></g><g><title>update (detector.py:409) (140 samples, 6.36%)</title><rect x="0.7266%" y="84" width="6.3579%" height="15" fill="rgb(247,81,37)" fg:x="16" fg:w="140"/><text x="0.9766%" y="94.50">update (..</text></g><g><title>_pixel_data (pyzbar/pyzbar.py:144) (7 samples, 0.32%)</title><rect x="7.2661%" y="132" width="0.3179%" height="15" fill="rgb(209,12,38)" fg:x="160" fg:w="7"/><text x="7.5161%" y="142.50"></text></g><g><title>decode (pyzbar/pyzbar.py:190) (61 samples, 2.77%)</title><rect x="7.1299%" y="116" width="2.7702%" height="15" fill="rgb(227,1,9)" fg:x="157" fg:w="61"/><text x="7.3799%" y="126.50">de..</text></g><g><title>_pixel_data (pyzbar/pyzbar.py:147) (51 samples, 2.32%)</title><rect x="7.5840%" y="132" width="2.3161%" height="15" fill="rgb(248,47,43)" fg:x="167" fg:w="51"/><text x="7.8340%" y="142.50">_..</text></g><g><title>decode (pyzbar/pyzbar.py:213) (895 samples, 40.64%)</title><rect x="10.0363%" y="116" width="40.6449%" height="15" fill="rgb(221,10,30)" fg:x="221" fg:w="895"/><text x="10.2863%" y="126.50">decode (pyzbar/pyzbar.py:213)</text></g><g><title>_decode_symbols (pyzbar/pyzbar.py:106) (3 samples, 0.14%)</title><rect x="50.8174%" y="132" width="0.1362%" height="15" fill="rgb(210,229,1)" fg:x="1119" fg:w="3"/><text x="51.0674%" y="142.50"></text></g><g><title>checkForMarker (detector.py:460) (967 samples, 43.91%)</title><rect x="7.1299%" y="100" width="43.9146%" height="15" fill="rgb(222,148,37)" fg:x="157" fg:w="967"/><text x="7.3799%" y="110.50">checkForMarker (detector.py:460)</text></g><g><title>decode (pyzbar/pyzbar.py:217) (8 samples, 0.36%)</title><rect x="50.6812%" y="116" width="0.3633%" height="15" fill="rgb(234,67,33)" fg:x="1116" fg:w="8"/><text x="50.9312%" y="126.50"></text></g><g><title>checkForMarker (detector.py:478) (3 samples, 0.14%)</title><rect x="51.0445%" y="100" width="0.1362%" height="15" fill="rgb(247,98,35)" fg:x="1124" fg:w="3"/><text x="51.2945%" y="110.50"></text></g><g><title>checkForMarker (detector.py:485) (5 samples, 0.23%)</title><rect x="51.1807%" y="100" width="0.2271%" height="15" fill="rgb(247,138,52)" fg:x="1127" fg:w="5"/><text x="51.4307%" y="110.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (5 samples, 0.23%)</title><rect x="51.1807%" y="116" width="0.2271%" height="15" fill="rgb(213,79,30)" fg:x="1127" fg:w="5"/><text x="51.4307%" y="126.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3441) (5 samples, 0.23%)</title><rect x="51.1807%" y="132" width="0.2271%" height="15" fill="rgb(246,177,23)" fg:x="1127" fg:w="5"/><text x="51.4307%" y="142.50"></text></g><g><title>update (detector.py:410) (977 samples, 44.37%)</title><rect x="7.0845%" y="84" width="44.3688%" height="15" fill="rgb(230,62,27)" fg:x="156" fg:w="977"/><text x="7.3345%" y="94.50">update (detector.py:410)</text></g><g><title>estimateLineForm (detector.py:212) (5 samples, 0.23%)</title><rect x="51.4532%" y="100" width="0.2271%" height="15" fill="rgb(216,154,8)" fg:x="1133" fg:w="5"/><text x="51.7032%" y="110.50"></text></g><g><title>estimateLineForm (detector.py:221) (18 samples, 0.82%)</title><rect x="51.7711%" y="100" width="0.8174%" height="15" fill="rgb(244,35,45)" fg:x="1140" fg:w="18"/><text x="52.0211%" y="110.50"></text></g><g><title>estimateLineForm (detector.py:223) (58 samples, 2.63%)</title><rect x="52.5886%" y="100" width="2.6340%" height="15" fill="rgb(251,115,12)" fg:x="1158" fg:w="58"/><text x="52.8386%" y="110.50">es..</text></g><g><title>estimateLineForm (detector.py:226) (4 samples, 0.18%)</title><rect x="55.2679%" y="100" width="0.1817%" height="15" fill="rgb(240,54,50)" fg:x="1217" fg:w="4"/><text x="55.5179%" y="110.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (4 samples, 0.18%)</title><rect x="55.2679%" y="116" width="0.1817%" height="15" fill="rgb(233,84,52)" fg:x="1217" fg:w="4"/><text x="55.5179%" y="126.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3441) (3 samples, 0.14%)</title><rect x="55.3134%" y="132" width="0.1362%" height="15" fill="rgb(207,117,47)" fg:x="1218" fg:w="3"/><text x="55.5634%" y="142.50"></text></g><g><title>update (detector.py:411) (91 samples, 4.13%)</title><rect x="51.4532%" y="84" width="4.1326%" height="15" fill="rgb(249,43,39)" fg:x="1133" fg:w="91"/><text x="51.7032%" y="94.50">updat..</text></g><g><title>estimateVelocities (detector.py:247) (3 samples, 0.14%)</title><rect x="55.6312%" y="100" width="0.1362%" height="15" fill="rgb(209,38,44)" fg:x="1225" fg:w="3"/><text x="55.8812%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:251) (5 samples, 0.23%)</title><rect x="55.7675%" y="100" width="0.2271%" height="15" fill="rgb(236,212,23)" fg:x="1228" fg:w="5"/><text x="56.0175%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:253) (96 samples, 4.36%)</title><rect x="55.9946%" y="100" width="4.3597%" height="15" fill="rgb(242,79,21)" fg:x="1233" fg:w="96"/><text x="56.2446%" y="110.50">estim..</text></g><g><title>estimateVelocities (detector.py:255) (32 samples, 1.45%)</title><rect x="60.3542%" y="100" width="1.4532%" height="15" fill="rgb(211,96,35)" fg:x="1329" fg:w="32"/><text x="60.6042%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:257) (3 samples, 0.14%)</title><rect x="61.8074%" y="100" width="0.1362%" height="15" fill="rgb(253,215,40)" fg:x="1361" fg:w="3"/><text x="62.0574%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:262) (7 samples, 0.32%)</title><rect x="61.9437%" y="100" width="0.3179%" height="15" fill="rgb(211,81,21)" fg:x="1364" fg:w="7"/><text x="62.1937%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:270) (3 samples, 0.14%)</title><rect x="62.3524%" y="100" width="0.1362%" height="15" fill="rgb(208,190,38)" fg:x="1373" fg:w="3"/><text x="62.6024%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:286) (14 samples, 0.64%)</title><rect x="62.5795%" y="100" width="0.6358%" height="15" fill="rgb(235,213,38)" fg:x="1378" fg:w="14"/><text x="62.8295%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:287) (3 samples, 0.14%)</title><rect x="63.2153%" y="100" width="0.1362%" height="15" fill="rgb(237,122,38)" fg:x="1392" fg:w="3"/><text x="63.4653%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:289) (29 samples, 1.32%)</title><rect x="63.3969%" y="100" width="1.3170%" height="15" fill="rgb(244,218,35)" fg:x="1396" fg:w="29"/><text x="63.6469%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:292) (3 samples, 0.14%)</title><rect x="64.7593%" y="100" width="0.1362%" height="15" fill="rgb(240,68,47)" fg:x="1426" fg:w="3"/><text x="65.0093%" y="110.50"></text></g><g><title>estimateVelocities (detector.py:294) (3 samples, 0.14%)</title><rect x="64.8955%" y="100" width="0.1362%" height="15" fill="rgb(210,16,53)" fg:x="1429" fg:w="3"/><text x="65.1455%" y="110.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2530) (6 samples, 0.27%)</title><rect x="65.8946%" y="164" width="0.2725%" height="15" fill="rgb(235,124,12)" fg:x="1451" fg:w="6"/><text x="66.1446%" y="174.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (4 samples, 0.18%)</title><rect x="65.9855%" y="180" width="0.1817%" height="15" fill="rgb(224,169,11)" fg:x="1453" fg:w="4"/><text x="66.2355%" y="190.50"></text></g><g><title>angle_between (utils/math.py:18) (28 samples, 1.27%)</title><rect x="65.1680%" y="116" width="1.2716%" height="15" fill="rgb(250,166,2)" fg:x="1435" fg:w="28"/><text x="65.4180%" y="126.50"></text></g><g><title>unit_vector (utils/math.py:6) (27 samples, 1.23%)</title><rect x="65.2134%" y="132" width="1.2262%" height="15" fill="rgb(242,216,29)" fg:x="1436" fg:w="27"/><text x="65.4634%" y="142.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:6) (20 samples, 0.91%)</title><rect x="65.5313%" y="148" width="0.9083%" height="15" fill="rgb(230,116,27)" fg:x="1443" fg:w="20"/><text x="65.7813%" y="158.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2531) (6 samples, 0.27%)</title><rect x="66.1671%" y="164" width="0.2725%" height="15" fill="rgb(228,99,48)" fg:x="1457" fg:w="6"/><text x="66.4171%" y="174.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2530) (5 samples, 0.23%)</title><rect x="67.1208%" y="164" width="0.2271%" height="15" fill="rgb(253,11,6)" fg:x="1478" fg:w="5"/><text x="67.3708%" y="174.50"></text></g><g><title>angle_between (utils/math.py:19) (22 samples, 1.00%)</title><rect x="66.4396%" y="116" width="0.9991%" height="15" fill="rgb(247,143,39)" fg:x="1463" fg:w="22"/><text x="66.6896%" y="126.50"></text></g><g><title>unit_vector (utils/math.py:6) (21 samples, 0.95%)</title><rect x="66.4850%" y="132" width="0.9537%" height="15" fill="rgb(236,97,10)" fg:x="1464" fg:w="21"/><text x="66.7350%" y="142.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:6) (13 samples, 0.59%)</title><rect x="66.8483%" y="148" width="0.5904%" height="15" fill="rgb(233,208,19)" fg:x="1472" fg:w="13"/><text x="67.0983%" y="158.50"></text></g><g><title>_clip (numpy/core/_methods.py:132) (4 samples, 0.18%)</title><rect x="68.3470%" y="180" width="0.1817%" height="15" fill="rgb(216,164,2)" fg:x="1505" fg:w="4"/><text x="68.5970%" y="190.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:93) (7 samples, 0.32%)</title><rect x="68.5286%" y="196" width="0.3179%" height="15" fill="rgb(220,129,5)" fg:x="1509" fg:w="7"/><text x="68.7786%" y="206.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (5 samples, 0.23%)</title><rect x="68.6194%" y="212" width="0.2271%" height="15" fill="rgb(242,17,10)" fg:x="1511" fg:w="5"/><text x="68.8694%" y="222.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py:3160) (3 samples, 0.14%)</title><rect x="68.8919%" y="228" width="0.1362%" height="15" fill="rgb(242,107,0)" fg:x="1517" fg:w="3"/><text x="69.1419%" y="238.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:94) (6 samples, 0.27%)</title><rect x="68.8465%" y="196" width="0.2725%" height="15" fill="rgb(251,28,31)" fg:x="1516" fg:w="6"/><text x="69.0965%" y="206.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (5 samples, 0.23%)</title><rect x="68.8919%" y="212" width="0.2271%" height="15" fill="rgb(233,223,10)" fg:x="1517" fg:w="5"/><text x="69.1419%" y="222.50"></text></g><g><title>_clip (numpy/core/_methods.py:134) (15 samples, 0.68%)</title><rect x="68.5286%" y="180" width="0.6812%" height="15" fill="rgb(215,21,27)" fg:x="1509" fg:w="15"/><text x="68.7786%" y="190.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:93) (4 samples, 0.18%)</title><rect x="69.2098%" y="196" width="0.1817%" height="15" fill="rgb(232,23,21)" fg:x="1524" fg:w="4"/><text x="69.4598%" y="206.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (3 samples, 0.14%)</title><rect x="69.2552%" y="212" width="0.1362%" height="15" fill="rgb(244,5,23)" fg:x="1525" fg:w="3"/><text x="69.5052%" y="222.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:94) (3 samples, 0.14%)</title><rect x="69.3915%" y="196" width="0.1362%" height="15" fill="rgb(226,81,46)" fg:x="1528" fg:w="3"/><text x="69.6415%" y="206.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (3 samples, 0.14%)</title><rect x="69.3915%" y="212" width="0.1362%" height="15" fill="rgb(247,70,30)" fg:x="1528" fg:w="3"/><text x="69.6415%" y="222.50"></text></g><g><title>_clip (numpy/core/_methods.py:137) (13 samples, 0.59%)</title><rect x="69.2098%" y="180" width="0.5904%" height="15" fill="rgb(212,68,19)" fg:x="1524" fg:w="13"/><text x="69.4598%" y="190.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:97) (6 samples, 0.27%)</title><rect x="69.5277%" y="196" width="0.2725%" height="15" fill="rgb(240,187,13)" fg:x="1531" fg:w="6"/><text x="69.7777%" y="206.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (58 samples, 2.63%)</title><rect x="67.7566%" y="132" width="2.6340%" height="15" fill="rgb(223,113,26)" fg:x="1492" fg:w="58"/><text x="68.0066%" y="142.50">cl..</text></g><g><title>clip (numpy/core/fromnumeric.py:2115) (56 samples, 2.54%)</title><rect x="67.8474%" y="148" width="2.5431%" height="15" fill="rgb(206,192,2)" fg:x="1494" fg:w="56"/><text x="68.0974%" y="158.50">cl..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:57) (50 samples, 2.27%)</title><rect x="68.1199%" y="164" width="2.2707%" height="15" fill="rgb(241,108,4)" fg:x="1500" fg:w="50"/><text x="68.3699%" y="174.50">_..</text></g><g><title>_clip (numpy/core/_methods.py:160) (13 samples, 0.59%)</title><rect x="69.8002%" y="180" width="0.5904%" height="15" fill="rgb(247,173,49)" fg:x="1537" fg:w="13"/><text x="70.0502%" y="190.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:113) (10 samples, 0.45%)</title><rect x="69.9364%" y="196" width="0.4541%" height="15" fill="rgb(224,114,35)" fg:x="1540" fg:w="10"/><text x="70.1864%" y="206.50"></text></g><g><title>estimateVelocities (detector.py:298) (119 samples, 5.40%)</title><rect x="65.0772%" y="100" width="5.4042%" height="15" fill="rgb(245,159,27)" fg:x="1433" fg:w="119"/><text x="65.3272%" y="110.50">estimat..</text></g><g><title>angle_between (utils/math.py:20) (67 samples, 3.04%)</title><rect x="67.4387%" y="116" width="3.0427%" height="15" fill="rgb(245,172,44)" fg:x="1485" fg:w="67"/><text x="67.6887%" y="126.50">ang..</text></g><g><title>rotate_about (utils/math.py:67) (7 samples, 0.32%)</title><rect x="71.1172%" y="132" width="0.3179%" height="15" fill="rgb(236,23,11)" fg:x="1566" fg:w="7"/><text x="71.3672%" y="142.50"></text></g><g><title>rotate_about (utils/math.py:69) (16 samples, 0.73%)</title><rect x="71.4805%" y="132" width="0.7266%" height="15" fill="rgb(205,117,38)" fg:x="1574" fg:w="16"/><text x="71.7305%" y="142.50"></text></g><g><title>turn_clockwise (utils/math.py:86) (49 samples, 2.23%)</title><rect x="70.6630%" y="116" width="2.2252%" height="15" fill="rgb(237,72,25)" fg:x="1556" fg:w="49"/><text x="70.9130%" y="126.50">t..</text></g><g><title>rotate_about (utils/math.py:70) (15 samples, 0.68%)</title><rect x="72.2071%" y="132" width="0.6812%" height="15" fill="rgb(244,70,9)" fg:x="1590" fg:w="15"/><text x="72.4571%" y="142.50"></text></g><g><title>rotate_about (utils/math.py:68) (4 samples, 0.18%)</title><rect x="73.5241%" y="132" width="0.1817%" height="15" fill="rgb(217,125,39)" fg:x="1619" fg:w="4"/><text x="73.7741%" y="142.50"></text></g><g><title>rotate_about (utils/math.py:69) (10 samples, 0.45%)</title><rect x="73.7057%" y="132" width="0.4541%" height="15" fill="rgb(235,36,10)" fg:x="1623" fg:w="10"/><text x="73.9557%" y="142.50"></text></g><g><title>turn_clockwise (utils/math.py:87) (36 samples, 1.63%)</title><rect x="72.8883%" y="116" width="1.6349%" height="15" fill="rgb(251,123,47)" fg:x="1605" fg:w="36"/><text x="73.1383%" y="126.50"></text></g><g><title>rotate_about (utils/math.py:70) (8 samples, 0.36%)</title><rect x="74.1599%" y="132" width="0.3633%" height="15" fill="rgb(221,13,13)" fg:x="1633" fg:w="8"/><text x="74.4099%" y="142.50"></text></g><g><title>_all (numpy/core/_methods.py:63) (14 samples, 0.64%)</title><rect x="74.8411%" y="132" width="0.6358%" height="15" fill="rgb(238,131,9)" fg:x="1648" fg:w="14"/><text x="75.0911%" y="142.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2516) (3 samples, 0.14%)</title><rect x="76.5213%" y="180" width="0.1362%" height="15" fill="rgb(211,50,8)" fg:x="1685" fg:w="3"/><text x="76.7713%" y="190.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2530) (14 samples, 0.64%)</title><rect x="76.7484%" y="180" width="0.6358%" height="15" fill="rgb(245,182,24)" fg:x="1690" fg:w="14"/><text x="76.9984%" y="190.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (12 samples, 0.54%)</title><rect x="76.8392%" y="196" width="0.5450%" height="15" fill="rgb(242,14,37)" fg:x="1692" fg:w="12"/><text x="77.0892%" y="206.50"></text></g><g><title>angle_between (utils/math.py:18) (50 samples, 2.27%)</title><rect x="75.4768%" y="132" width="2.2707%" height="15" fill="rgb(246,228,12)" fg:x="1662" fg:w="50"/><text x="75.7268%" y="142.50">a..</text></g><g><title>unit_vector (utils/math.py:6) (47 samples, 2.13%)</title><rect x="75.6131%" y="148" width="2.1344%" height="15" fill="rgb(213,55,15)" fg:x="1665" fg:w="47"/><text x="75.8631%" y="158.50">u..</text></g><g><title>norm (&lt;__array_function__ internals&gt;:6) (36 samples, 1.63%)</title><rect x="76.1126%" y="164" width="1.6349%" height="15" fill="rgb(209,9,3)" fg:x="1676" fg:w="36"/><text x="76.3626%" y="174.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2531) (8 samples, 0.36%)</title><rect x="77.3842%" y="180" width="0.3633%" height="15" fill="rgb(230,59,30)" fg:x="1704" fg:w="8"/><text x="77.6342%" y="190.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2514) (7 samples, 0.32%)</title><rect x="79.0191%" y="180" width="0.3179%" height="15" fill="rgb(209,121,21)" fg:x="1740" fg:w="7"/><text x="79.2691%" y="190.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2526) (3 samples, 0.14%)</title><rect x="79.3824%" y="180" width="0.1362%" height="15" fill="rgb(220,109,13)" fg:x="1748" fg:w="3"/><text x="79.6324%" y="190.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2530) (11 samples, 0.50%)</title><rect x="79.6094%" y="180" width="0.4995%" height="15" fill="rgb(232,18,1)" fg:x="1753" fg:w="11"/><text x="79.8594%" y="190.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (11 samples, 0.50%)</title><rect x="79.6094%" y="196" width="0.4995%" height="15" fill="rgb(215,41,42)" fg:x="1753" fg:w="11"/><text x="79.8594%" y="206.50"></text></g><g><title>angle_between (utils/math.py:19) (67 samples, 3.04%)</title><rect x="77.7475%" y="132" width="3.0427%" height="15" fill="rgb(224,123,36)" fg:x="1712" fg:w="67"/><text x="77.9975%" y="142.50">ang..</text></g><g><title>unit_vector (utils/math.py:6) (66 samples, 3.00%)</title><rect x="77.7929%" y="148" width="2.9973%" height="15" fill="rgb(240,125,3)" fg:x="1713" fg:w="66"/><text x="78.0429%" y="158.50">uni..</text></g><g><title>norm (&lt;__array_function__ internals&gt;:6) (44 samples, 2.00%)</title><rect x="78.7920%" y="164" width="1.9982%" height="15" fill="rgb(205,98,50)" fg:x="1735" fg:w="44"/><text x="79.0420%" y="174.50">n..</text></g><g><title>norm (numpy/linalg/linalg.py:2531) (15 samples, 0.68%)</title><rect x="80.1090%" y="180" width="0.6812%" height="15" fill="rgb(205,185,37)" fg:x="1764" fg:w="15"/><text x="80.3590%" y="190.50"></text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:52) (3 samples, 0.14%)</title><rect x="81.7439%" y="180" width="0.1362%" height="15" fill="rgb(238,207,15)" fg:x="1800" fg:w="3"/><text x="81.9939%" y="190.50"></text></g><g><title>_clip (numpy/core/_methods.py:132) (3 samples, 0.14%)</title><rect x="81.9255%" y="196" width="0.1362%" height="15" fill="rgb(213,199,42)" fg:x="1804" fg:w="3"/><text x="82.1755%" y="206.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (7 samples, 0.32%)</title><rect x="82.2888%" y="228" width="0.3179%" height="15" fill="rgb(235,201,11)" fg:x="1812" fg:w="7"/><text x="82.5388%" y="238.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:93) (12 samples, 0.54%)</title><rect x="82.1072%" y="212" width="0.5450%" height="15" fill="rgb(207,46,11)" fg:x="1808" fg:w="12"/><text x="82.3572%" y="222.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py:3160) (6 samples, 0.27%)</title><rect x="82.7430%" y="244" width="0.2725%" height="15" fill="rgb(241,35,35)" fg:x="1822" fg:w="6"/><text x="82.9930%" y="254.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:94) (14 samples, 0.64%)</title><rect x="82.6521%" y="212" width="0.6358%" height="15" fill="rgb(243,32,47)" fg:x="1820" fg:w="14"/><text x="82.9021%" y="222.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (13 samples, 0.59%)</title><rect x="82.6975%" y="228" width="0.5904%" height="15" fill="rgb(247,202,23)" fg:x="1821" fg:w="13"/><text x="82.9475%" y="238.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py:3162) (5 samples, 0.23%)</title><rect x="83.0609%" y="244" width="0.2271%" height="15" fill="rgb(219,102,11)" fg:x="1829" fg:w="5"/><text x="83.3109%" y="254.50"></text></g><g><title>_clip (numpy/core/_methods.py:134) (35 samples, 1.59%)</title><rect x="82.0618%" y="196" width="1.5895%" height="15" fill="rgb(243,110,44)" fg:x="1807" fg:w="35"/><text x="82.3118%" y="206.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:97) (8 samples, 0.36%)</title><rect x="83.2879%" y="212" width="0.3633%" height="15" fill="rgb(222,74,54)" fg:x="1834" fg:w="8"/><text x="83.5379%" y="222.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:93) (8 samples, 0.36%)</title><rect x="83.6512%" y="212" width="0.3633%" height="15" fill="rgb(216,99,12)" fg:x="1842" fg:w="8"/><text x="83.9012%" y="222.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1019) (5 samples, 0.23%)</title><rect x="83.7875%" y="228" width="0.2271%" height="15" fill="rgb(226,22,26)" fg:x="1845" fg:w="5"/><text x="84.0375%" y="238.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:94) (10 samples, 0.45%)</title><rect x="84.0145%" y="212" width="0.4541%" height="15" fill="rgb(217,163,10)" fg:x="1850" fg:w="10"/><text x="84.2645%" y="222.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:6) (7 samples, 0.32%)</title><rect x="84.1508%" y="228" width="0.3179%" height="15" fill="rgb(213,25,53)" fg:x="1853" fg:w="7"/><text x="84.4008%" y="238.50"></text></g><g><title>ndim (numpy/core/fromnumeric.py:3162) (3 samples, 0.14%)</title><rect x="84.3324%" y="244" width="0.1362%" height="15" fill="rgb(252,105,26)" fg:x="1857" fg:w="3"/><text x="84.5824%" y="254.50"></text></g><g><title>_clip (numpy/core/_methods.py:137) (23 samples, 1.04%)</title><rect x="83.6512%" y="196" width="1.0445%" height="15" fill="rgb(220,39,43)" fg:x="1842" fg:w="23"/><text x="83.9012%" y="206.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy/core/_methods.py:97) (5 samples, 0.23%)</title><rect x="84.4687%" y="212" width="0.2271%" height="15" fill="rgb(229,68,48)" fg:x="1860" fg:w="5"/><text x="84.7187%" y="222.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:6) (91 samples, 4.13%)</title><rect x="81.2897%" y="148" width="4.1326%" height="15" fill="rgb(252,8,32)" fg:x="1790" fg:w="91"/><text x="81.5397%" y="158.50">clip ..</text></g><g><title>clip (numpy/core/fromnumeric.py:2115) (87 samples, 3.95%)</title><rect x="81.4714%" y="164" width="3.9510%" height="15" fill="rgb(223,20,43)" fg:x="1794" fg:w="87"/><text x="81.7214%" y="174.50">clip..</text></g><g><title>_wrapfunc (numpy/core/fromnumeric.py:57) (78 samples, 3.54%)</title><rect x="81.8801%" y="180" width="3.5422%" height="15" fill="rgb(229,81,49)" fg:x="1803" fg:w="78"/><text x="82.1301%" y="190.50">_wra..</text></g><g><title>_clip (numpy/core/_methods.py:160) (16 samples, 0.73%)</title><rect x="84.6957%" y="196" width="0.7266%" height="15" fill="rgb(236,28,36)" fg:x="1865" fg:w="16"/><text x="84.9457%" y="206.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy/core/_methods.py:113) (8 samples, 0.36%)</title><rect x="85.0590%" y="212" width="0.3633%" height="15" fill="rgb(249,185,26)" fg:x="1873" fg:w="8"/><text x="85.3090%" y="222.50"></text></g><g><title>estimateVelocities (detector.py:299) (335 samples, 15.21%)</title><rect x="70.4814%" y="100" width="15.2134%" height="15" fill="rgb(249,174,33)" fg:x="1552" fg:w="335"/><text x="70.7314%" y="110.50">estimateVelocities (det..</text></g><g><title>turn_clockwise (utils/math.py:89) (246 samples, 11.17%)</title><rect x="74.5232%" y="116" width="11.1717%" height="15" fill="rgb(233,201,37)" fg:x="1641" fg:w="246"/><text x="74.7732%" y="126.50">turn_clockwise (..</text></g><g><title>angle_between (utils/math.py:20) (108 samples, 4.90%)</title><rect x="80.7902%" y="132" width="4.9046%" height="15" fill="rgb(221,78,26)" fg:x="1779" fg:w="108"/><text x="81.0402%" y="142.50">angle_..</text></g><g><title>dot (&lt;__array_function__ internals&gt;:6) (5 samples, 0.23%)</title><rect x="85.4678%" y="148" width="0.2271%" height="15" fill="rgb(250,127,30)" fg:x="1882" fg:w="5"/><text x="85.7178%" y="158.50"></text></g><g><title>estimateVelocities (detector.py:301) (3 samples, 0.14%)</title><rect x="85.6948%" y="100" width="0.1362%" height="15" fill="rgb(230,49,44)" fg:x="1887" fg:w="3"/><text x="85.9448%" y="110.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3432) (3 samples, 0.14%)</title><rect x="86.6031%" y="132" width="0.1362%" height="15" fill="rgb(229,67,23)" fg:x="1907" fg:w="3"/><text x="86.8531%" y="142.50"></text></g><g><title>_count_reduce_items (numpy/core/_methods.py:71) (5 samples, 0.23%)</title><rect x="87.1935%" y="164" width="0.2271%" height="15" fill="rgb(249,83,47)" fg:x="1920" fg:w="5"/><text x="87.4435%" y="174.50"></text></g><g><title>_mean (numpy/core/_methods.py:167) (12 samples, 0.54%)</title><rect x="87.1935%" y="148" width="0.5450%" height="15" fill="rgb(215,43,3)" fg:x="1920" fg:w="12"/><text x="87.4435%" y="158.50"></text></g><g><title>_count_reduce_items (numpy/core/_methods.py:74) (7 samples, 0.32%)</title><rect x="87.4205%" y="164" width="0.3179%" height="15" fill="rgb(238,154,13)" fg:x="1925" fg:w="7"/><text x="87.6705%" y="174.50"></text></g><g><title>_mean (numpy/core/_methods.py:179) (13 samples, 0.59%)</title><rect x="87.9201%" y="148" width="0.5904%" height="15" fill="rgb(219,56,2)" fg:x="1936" fg:w="13"/><text x="88.1701%" y="158.50"></text></g><g><title>estimateVelocities (detector.py:302) (65 samples, 2.95%)</title><rect x="85.8311%" y="100" width="2.9519%" height="15" fill="rgb(233,0,4)" fg:x="1890" fg:w="65"/><text x="86.0811%" y="110.50">est..</text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (59 samples, 2.68%)</title><rect x="86.1035%" y="116" width="2.6794%" height="15" fill="rgb(235,30,7)" fg:x="1896" fg:w="59"/><text x="86.3535%" y="126.50">me..</text></g><g><title>mean (numpy/core/fromnumeric.py:3438) (44 samples, 2.00%)</title><rect x="86.7847%" y="132" width="1.9982%" height="15" fill="rgb(250,79,13)" fg:x="1911" fg:w="44"/><text x="87.0347%" y="142.50">m..</text></g><g><title>_mean (numpy/core/_methods.py:189) (4 samples, 0.18%)</title><rect x="88.6013%" y="148" width="0.1817%" height="15" fill="rgb(211,146,34)" fg:x="1951" fg:w="4"/><text x="88.8513%" y="158.50"></text></g><g><title>estimateVelocities (detector.py:309) (4 samples, 0.18%)</title><rect x="88.9192%" y="100" width="0.1817%" height="15" fill="rgb(228,22,38)" fg:x="1958" fg:w="4"/><text x="89.1692%" y="110.50"></text></g><g><title>mean (&lt;__array_function__ internals&gt;:6) (4 samples, 0.18%)</title><rect x="88.9192%" y="116" width="0.1817%" height="15" fill="rgb(235,168,5)" fg:x="1958" fg:w="4"/><text x="89.1692%" y="126.50"></text></g><g><title>mean (numpy/core/fromnumeric.py:3441) (4 samples, 0.18%)</title><rect x="88.9192%" y="132" width="0.1817%" height="15" fill="rgb(221,155,16)" fg:x="1958" fg:w="4"/><text x="89.1692%" y="142.50"></text></g><g><title>estimateVelocities (detector.py:320) (18 samples, 0.82%)</title><rect x="89.3733%" y="100" width="0.8174%" height="15" fill="rgb(215,215,53)" fg:x="1968" fg:w="18"/><text x="89.6233%" y="110.50"></text></g><g><title>update (detector.py:412) (763 samples, 34.65%)</title><rect x="55.5858%" y="84" width="34.6503%" height="15" fill="rgb(223,4,10)" fg:x="1224" fg:w="763"/><text x="55.8358%" y="94.50">update (detector.py:412)</text></g><g><title>getDebugView (detector.py:137) (10 samples, 0.45%)</title><rect x="91.2352%" y="100" width="0.4541%" height="15" fill="rgb(234,103,6)" fg:x="2009" fg:w="10"/><text x="91.4852%" y="110.50"></text></g><g><title>scale_from (detector.py:14) (73 samples, 3.32%)</title><rect x="92.9609%" y="148" width="3.3152%" height="15" fill="rgb(227,97,0)" fg:x="2047" fg:w="73"/><text x="93.2109%" y="158.50">sca..</text></g><g><title>getDebugView (detector.py:145) (102 samples, 4.63%)</title><rect x="91.6894%" y="100" width="4.6322%" height="15" fill="rgb(234,150,53)" fg:x="2019" fg:w="102"/><text x="91.9394%" y="110.50">getDe..</text></g><g><title>&lt;listcomp&gt; (detector.py:145) (100 samples, 4.54%)</title><rect x="91.7802%" y="116" width="4.5413%" height="15" fill="rgb(228,201,54)" fg:x="2021" fg:w="100"/><text x="92.0302%" y="126.50">&lt;list..</text></g><g><title>&lt;lambda&gt; (detector.py:145) (76 samples, 3.45%)</title><rect x="92.8701%" y="132" width="3.4514%" height="15" fill="rgb(222,22,37)" fg:x="2045" fg:w="76"/><text x="93.1201%" y="142.50">&lt;la..</text></g><g><title>update (detector.py:423) (136 samples, 6.18%)</title><rect x="90.3270%" y="84" width="6.1762%" height="15" fill="rgb(237,53,32)" fg:x="1989" fg:w="136"/><text x="90.5770%" y="94.50">update (..</text></g><g><title>&lt;module&gt; (detector.py:495) (2,184 samples, 99.18%)</title><rect x="0.7266%" y="68" width="99.1826%" height="15" fill="rgb(233,25,53)" fg:x="16" fg:w="2184"/><text x="0.9766%" y="78.50">&lt;module&gt; (detector.py:495)</text></g><g><title>update (detector.py:424) (75 samples, 3.41%)</title><rect x="96.5032%" y="84" width="3.4060%" height="15" fill="rgb(210,40,34)" fg:x="2125" fg:w="75"/><text x="96.7532%" y="94.50">upd..</text></g><g><title>all (2,202 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,220,44)" fg:x="0" fg:w="2202"/><text x="0.2500%" y="62.50"></text></g></svg></svg>