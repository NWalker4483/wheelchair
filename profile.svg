<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="586" onload="init(evt)" viewBox="0 0 1200 586" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="586" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python3.7 detector.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="575.00"> </text><svg id="frames" x="10" width="1180" total_samples="4490"><g><title>&lt;module&gt; (numpy/core/__init__.py:72) (5 samples, 0.11%)</title><rect x="0.0668%" y="436" width="0.1114%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="5"/><text x="0.3168%" y="446.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (5 samples, 0.11%)</title><rect x="0.0668%" y="452" width="0.1114%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="5"/><text x="0.3168%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.11%)</title><rect x="0.0668%" y="468" width="0.1114%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="5"/><text x="0.3168%" y="478.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.11%)</title><rect x="0.0668%" y="484" width="0.1114%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="5"/><text x="0.3168%" y="494.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.11%)</title><rect x="0.0668%" y="500" width="0.1114%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="5"/><text x="0.3168%" y="510.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.11%)</title><rect x="0.0668%" y="516" width="0.1114%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="5"/><text x="0.3168%" y="526.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.11%)</title><rect x="0.0668%" y="532" width="0.1114%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="5"/><text x="0.3168%" y="542.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.11%)</title><rect x="0.0668%" y="548" width="0.1114%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="5"/><text x="0.3168%" y="558.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:150) (11 samples, 0.24%)</title><rect x="0.0000%" y="308" width="0.2450%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="11"/><text x="0.2500%" y="318.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1035) (11 samples, 0.24%)</title><rect x="0.0000%" y="324" width="0.2450%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="11"/><text x="0.2500%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.24%)</title><rect x="0.0000%" y="340" width="0.2450%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="11"/><text x="0.2500%" y="350.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (11 samples, 0.24%)</title><rect x="0.0000%" y="356" width="0.2450%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="11"/><text x="0.2500%" y="366.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (11 samples, 0.24%)</title><rect x="0.0000%" y="372" width="0.2450%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="11"/><text x="0.2500%" y="382.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (11 samples, 0.24%)</title><rect x="0.0000%" y="388" width="0.2450%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="11"/><text x="0.2500%" y="398.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (11 samples, 0.24%)</title><rect x="0.0000%" y="404" width="0.2450%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="11"/><text x="0.2500%" y="414.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (11 samples, 0.24%)</title><rect x="0.0000%" y="420" width="0.2450%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="11"/><text x="0.2500%" y="430.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (17 samples, 0.38%)</title><rect x="0.0000%" y="100" width="0.3786%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="17"/><text x="0.2500%" y="110.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 0.38%)</title><rect x="0.0000%" y="116" width="0.3786%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="17"/><text x="0.2500%" y="126.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (17 samples, 0.38%)</title><rect x="0.0000%" y="132" width="0.3786%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="17"/><text x="0.2500%" y="142.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (17 samples, 0.38%)</title><rect x="0.0000%" y="148" width="0.3786%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="17"/><text x="0.2500%" y="158.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (17 samples, 0.38%)</title><rect x="0.0000%" y="164" width="0.3786%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="17"/><text x="0.2500%" y="174.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (17 samples, 0.38%)</title><rect x="0.0000%" y="180" width="0.3786%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="17"/><text x="0.2500%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 0.38%)</title><rect x="0.0000%" y="196" width="0.3786%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="17"/><text x="0.2500%" y="206.50"></text></g><g><title>&lt;module&gt; (utils/__init__.py:4) (17 samples, 0.38%)</title><rect x="0.0000%" y="212" width="0.3786%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="17"/><text x="0.2500%" y="222.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (17 samples, 0.38%)</title><rect x="0.0000%" y="228" width="0.3786%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="17"/><text x="0.2500%" y="238.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (17 samples, 0.38%)</title><rect x="0.0000%" y="244" width="0.3786%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="17"/><text x="0.2500%" y="254.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (17 samples, 0.38%)</title><rect x="0.0000%" y="260" width="0.3786%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="17"/><text x="0.2500%" y="270.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (17 samples, 0.38%)</title><rect x="0.0000%" y="276" width="0.3786%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="17"/><text x="0.2500%" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (17 samples, 0.38%)</title><rect x="0.0000%" y="292" width="0.3786%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="17"/><text x="0.2500%" y="302.50"></text></g><g><title>&lt;module&gt; (detector.py:2) (20 samples, 0.45%)</title><rect x="0.0000%" y="68" width="0.4454%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="20"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (20 samples, 0.45%)</title><rect x="0.0000%" y="84" width="0.4454%" height="15" fill="rgb(209,103,24)" fg:x="0" fg:w="20"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:953) (5 samples, 0.11%)</title><rect x="0.4454%" y="100" width="0.1114%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="5"/><text x="0.6954%" y="110.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.11%)</title><rect x="0.4454%" y="116" width="0.1114%" height="15" fill="rgb(213,181,19)" fg:x="20" fg:w="5"/><text x="0.6954%" y="126.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (5 samples, 0.11%)</title><rect x="0.4454%" y="132" width="0.1114%" height="15" fill="rgb(254,191,54)" fg:x="20" fg:w="5"/><text x="0.6954%" y="142.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:967) (5 samples, 0.11%)</title><rect x="0.4454%" y="148" width="0.1114%" height="15" fill="rgb(241,83,37)" fg:x="20" fg:w="5"/><text x="0.6954%" y="158.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:677) (5 samples, 0.11%)</title><rect x="0.4454%" y="164" width="0.1114%" height="15" fill="rgb(233,36,39)" fg:x="20" fg:w="5"/><text x="0.6954%" y="174.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:728) (5 samples, 0.11%)</title><rect x="0.4454%" y="180" width="0.1114%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="5"/><text x="0.6954%" y="190.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (5 samples, 0.11%)</title><rect x="0.4454%" y="196" width="0.1114%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="5"/><text x="0.6954%" y="206.50"></text></g><g><title>&lt;module&gt; (detector.py:4) (6 samples, 0.13%)</title><rect x="0.4454%" y="68" width="0.1336%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="6"/><text x="0.6954%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:983) (6 samples, 0.13%)</title><rect x="0.4454%" y="84" width="0.1336%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="6"/><text x="0.6954%" y="94.50"></text></g><g><title>__init__ (detector.py:39) (11 samples, 0.24%)</title><rect x="0.5791%" y="84" width="0.2450%" height="15" fill="rgb(231,60,39)" fg:x="26" fg:w="11"/><text x="0.8291%" y="94.50"></text></g><g><title>&lt;module&gt; (detector.py:551) (13 samples, 0.29%)</title><rect x="0.5791%" y="68" width="0.2895%" height="15" fill="rgb(208,69,12)" fg:x="26" fg:w="13"/><text x="0.8291%" y="78.50"></text></g><g><title>readCameraFeed (detector.py:410) (294 samples, 6.55%)</title><rect x="0.8909%" y="100" width="6.5479%" height="15" fill="rgb(235,93,37)" fg:x="40" fg:w="294"/><text x="1.1409%" y="110.50">readCamer..</text></g><g><title>readCameraFeed (detector.py:414) (1,233 samples, 27.46%)</title><rect x="7.4833%" y="100" width="27.4610%" height="15" fill="rgb(213,116,39)" fg:x="336" fg:w="1233"/><text x="7.7333%" y="110.50">readCameraFeed (detector.py:414)</text></g><g><title>resize (imutils/convenience.py:91) (1,231 samples, 27.42%)</title><rect x="7.5278%" y="116" width="27.4165%" height="15" fill="rgb(222,207,29)" fg:x="338" fg:w="1231"/><text x="7.7778%" y="126.50">resize (imutils/convenience.py:91)</text></g><g><title>update (detector.py:466) (1,670 samples, 37.19%)</title><rect x="0.8686%" y="84" width="37.1938%" height="15" fill="rgb(206,96,30)" fg:x="39" fg:w="1670"/><text x="1.1186%" y="94.50">update (detector.py:466)</text></g><g><title>readCameraFeed (detector.py:418) (139 samples, 3.10%)</title><rect x="34.9666%" y="100" width="3.0958%" height="15" fill="rgb(218,138,4)" fg:x="1570" fg:w="139"/><text x="35.2166%" y="110.50">rea..</text></g><g><title>resize (imutils/convenience.py:91) (138 samples, 3.07%)</title><rect x="34.9889%" y="116" width="3.0735%" height="15" fill="rgb(250,191,14)" fg:x="1571" fg:w="138"/><text x="35.2389%" y="126.50">res..</text></g><g><title>_pixel_data (pyzbar/pyzbar.py:144) (11 samples, 0.24%)</title><rect x="38.1514%" y="132" width="0.2450%" height="15" fill="rgb(239,60,40)" fg:x="1713" fg:w="11"/><text x="38.4014%" y="142.50"></text></g><g><title>__str__ (numpy/core/_dtype.py:42) (7 samples, 0.16%)</title><rect x="38.2405%" y="148" width="0.1559%" height="15" fill="rgb(206,27,48)" fg:x="1717" fg:w="7"/><text x="38.4905%" y="158.50"></text></g><g><title>_pixel_data (pyzbar/pyzbar.py:147) (108 samples, 2.41%)</title><rect x="38.3964%" y="132" width="2.4053%" height="15" fill="rgb(225,35,8)" fg:x="1724" fg:w="108"/><text x="38.6464%" y="142.50">_p..</text></g><g><title>decode (pyzbar/pyzbar.py:190) (122 samples, 2.72%)</title><rect x="38.1069%" y="116" width="2.7171%" height="15" fill="rgb(250,213,24)" fg:x="1711" fg:w="122"/><text x="38.3569%" y="126.50">de..</text></g><g><title>__enter__ (contextlib.py:112) (6 samples, 0.13%)</title><rect x="40.8463%" y="132" width="0.1336%" height="15" fill="rgb(247,123,22)" fg:x="1834" fg:w="6"/><text x="41.0963%" y="142.50"></text></g><g><title>_image_scanner (pyzbar/pyzbar.py:63) (6 samples, 0.13%)</title><rect x="40.8463%" y="148" width="0.1336%" height="15" fill="rgb(231,138,38)" fg:x="1834" fg:w="6"/><text x="41.0963%" y="158.50"></text></g><g><title>decode (pyzbar/pyzbar.py:193) (9 samples, 0.20%)</title><rect x="40.8241%" y="116" width="0.2004%" height="15" fill="rgb(231,145,46)" fg:x="1833" fg:w="9"/><text x="41.0741%" y="126.50"></text></g><g><title>decode (pyzbar/pyzbar.py:213) (1,229 samples, 27.37%)</title><rect x="41.1581%" y="116" width="27.3719%" height="15" fill="rgb(251,118,11)" fg:x="1848" fg:w="1229"/><text x="41.4081%" y="126.50">decode (pyzbar/pyzbar.py:213)</text></g><g><title>update (detector.py:467) (1,372 samples, 30.56%)</title><rect x="38.0624%" y="84" width="30.5568%" height="15" fill="rgb(217,147,25)" fg:x="1709" fg:w="1372"/><text x="38.3124%" y="94.50">update (detector.py:467)</text></g><g><title>checkForMarker (detector.py:519) (1,372 samples, 30.56%)</title><rect x="38.0624%" y="100" width="30.5568%" height="15" fill="rgb(247,81,37)" fg:x="1709" fg:w="1372"/><text x="38.3124%" y="110.50">checkForMarker (detector.py:519)</text></g><g><title>estimateLineForm (detector.py:240) (11 samples, 0.24%)</title><rect x="68.6192%" y="100" width="0.2450%" height="15" fill="rgb(209,12,38)" fg:x="3081" fg:w="11"/><text x="68.8692%" y="110.50"></text></g><g><title>estimateLineForm (detector.py:241) (10 samples, 0.22%)</title><rect x="68.8641%" y="100" width="0.2227%" height="15" fill="rgb(227,1,9)" fg:x="3092" fg:w="10"/><text x="69.1141%" y="110.50"></text></g><g><title>estimateLineForm (detector.py:249) (53 samples, 1.18%)</title><rect x="69.1537%" y="100" width="1.1804%" height="15" fill="rgb(248,47,43)" fg:x="3105" fg:w="53"/><text x="69.4037%" y="110.50"></text></g><g><title>estimateLineForm (detector.py:251) (155 samples, 3.45%)</title><rect x="70.3341%" y="100" width="3.4521%" height="15" fill="rgb(221,10,30)" fg:x="3158" fg:w="155"/><text x="70.5841%" y="110.50">est..</text></g><g><title>update (detector.py:468) (234 samples, 5.21%)</title><rect x="68.6192%" y="84" width="5.2116%" height="15" fill="rgb(210,229,1)" fg:x="3081" fg:w="234"/><text x="68.8692%" y="94.50">update..</text></g><g><title>updateOdometry (detector.py:368) (315 samples, 7.02%)</title><rect x="73.8753%" y="100" width="7.0156%" height="15" fill="rgb(222,148,37)" fg:x="3317" fg:w="315"/><text x="74.1253%" y="110.50">updateOdo..</text></g><g><title>updateOdometry (detector.py:371) (251 samples, 5.59%)</title><rect x="80.8909%" y="100" width="5.5902%" height="15" fill="rgb(234,67,33)" fg:x="3632" fg:w="251"/><text x="81.1409%" y="110.50">updateO..</text></g><g><title>updateOdometry (detector.py:388) (6 samples, 0.13%)</title><rect x="86.6592%" y="100" width="0.1336%" height="15" fill="rgb(247,98,35)" fg:x="3891" fg:w="6"/><text x="86.9092%" y="110.50"></text></g><g><title>updateOdometry (detector.py:389) (5 samples, 0.11%)</title><rect x="86.7929%" y="100" width="0.1114%" height="15" fill="rgb(247,138,52)" fg:x="3897" fg:w="5"/><text x="87.0429%" y="110.50"></text></g><g><title>pad (numpy/lib/arraypad.py:743) (7 samples, 0.16%)</title><rect x="86.9710%" y="132" width="0.1559%" height="15" fill="rgb(213,79,30)" fg:x="3905" fg:w="7"/><text x="87.2210%" y="142.50"></text></g><g><title>updateOdometry (detector.py:391) (17 samples, 0.38%)</title><rect x="86.9042%" y="100" width="0.3786%" height="15" fill="rgb(246,177,23)" fg:x="3902" fg:w="17"/><text x="87.1542%" y="110.50"></text></g><g><title>pad (&lt;__array_function__ internals&gt;:6) (16 samples, 0.36%)</title><rect x="86.9265%" y="116" width="0.3563%" height="15" fill="rgb(230,62,27)" fg:x="3903" fg:w="16"/><text x="87.1765%" y="126.50"></text></g><g><title>updateOdometry (detector.py:392) (96 samples, 2.14%)</title><rect x="87.2829%" y="100" width="2.1381%" height="15" fill="rgb(216,154,8)" fg:x="3919" fg:w="96"/><text x="87.5329%" y="110.50">u..</text></g><g><title>fillFormat (numpy/core/arrayprint.py:901) (7 samples, 0.16%)</title><rect x="89.9109%" y="228" width="0.1559%" height="15" fill="rgb(244,35,45)" fg:x="4037" fg:w="7"/><text x="90.1609%" y="238.50"></text></g><g><title>fillFormat (numpy/core/arrayprint.py:903) (8 samples, 0.18%)</title><rect x="90.0668%" y="228" width="0.1782%" height="15" fill="rgb(251,115,12)" fg:x="4044" fg:w="8"/><text x="90.3168%" y="238.50"></text></g><g><title>amax (&lt;__array_function__ internals&gt;:6) (7 samples, 0.16%)</title><rect x="90.0891%" y="244" width="0.1559%" height="15" fill="rgb(240,54,50)" fg:x="4045" fg:w="7"/><text x="90.3391%" y="254.50"></text></g><g><title>amax (numpy/core/fromnumeric.py:2755) (5 samples, 0.11%)</title><rect x="90.1336%" y="260" width="0.1114%" height="15" fill="rgb(233,84,52)" fg:x="4047" fg:w="5"/><text x="90.3836%" y="270.50"></text></g><g><title>fillFormat (numpy/core/arrayprint.py:904) (6 samples, 0.13%)</title><rect x="90.2450%" y="228" width="0.1336%" height="15" fill="rgb(207,117,47)" fg:x="4052" fg:w="6"/><text x="90.4950%" y="238.50"></text></g><g><title>amin (&lt;__array_function__ internals&gt;:6) (5 samples, 0.11%)</title><rect x="90.2673%" y="244" width="0.1114%" height="15" fill="rgb(249,43,39)" fg:x="4053" fg:w="5"/><text x="90.5173%" y="254.50"></text></g><g><title>fillFormat (numpy/core/arrayprint.py:905) (9 samples, 0.20%)</title><rect x="90.3786%" y="228" width="0.2004%" height="15" fill="rgb(209,38,44)" fg:x="4058" fg:w="9"/><text x="90.6286%" y="238.50"></text></g><g><title>__enter__ (numpy/core/_ufunc_config.py:430) (7 samples, 0.16%)</title><rect x="90.4232%" y="244" width="0.1559%" height="15" fill="rgb(236,212,23)" fg:x="4060" fg:w="7"/><text x="90.6732%" y="254.50"></text></g><g><title>_array2string (numpy/core/arrayprint.py:501) (59 samples, 1.31%)</title><rect x="89.5991%" y="164" width="1.3140%" height="15" fill="rgb(242,79,21)" fg:x="4023" fg:w="59"/><text x="89.8491%" y="174.50"></text></g><g><title>_get_format_function (numpy/core/arrayprint.py:434) (52 samples, 1.16%)</title><rect x="89.7550%" y="180" width="1.1581%" height="15" fill="rgb(211,96,35)" fg:x="4030" fg:w="52"/><text x="90.0050%" y="190.50"></text></g><g><title>&lt;lambda&gt; (numpy/core/arrayprint.py:376) (52 samples, 1.16%)</title><rect x="89.7550%" y="196" width="1.1581%" height="15" fill="rgb(253,215,40)" fg:x="4030" fg:w="52"/><text x="90.0050%" y="206.50"></text></g><g><title>__init__ (numpy/core/arrayprint.py:894) (50 samples, 1.11%)</title><rect x="89.7996%" y="212" width="1.1136%" height="15" fill="rgb(211,81,21)" fg:x="4032" fg:w="50"/><text x="90.0496%" y="222.50"></text></g><g><title>updateOdometry (detector.py:396) (79 samples, 1.76%)</title><rect x="89.4209%" y="100" width="1.7595%" height="15" fill="rgb(208,190,38)" fg:x="4015" fg:w="79"/><text x="89.6709%" y="110.50"></text></g><g><title>_array_str_implementation (numpy/core/arrayprint.py:1551) (75 samples, 1.67%)</title><rect x="89.5100%" y="116" width="1.6704%" height="15" fill="rgb(235,213,38)" fg:x="4019" fg:w="75"/><text x="89.7600%" y="126.50"></text></g><g><title>array2string (numpy/core/arrayprint.py:698) (72 samples, 1.60%)</title><rect x="89.5768%" y="132" width="1.6036%" height="15" fill="rgb(237,122,38)" fg:x="4022" fg:w="72"/><text x="89.8268%" y="142.50"></text></g><g><title>wrapper (numpy/core/arrayprint.py:475) (71 samples, 1.58%)</title><rect x="89.5991%" y="148" width="1.5813%" height="15" fill="rgb(244,218,35)" fg:x="4023" fg:w="71"/><text x="89.8491%" y="158.50"></text></g><g><title>_array2string (numpy/core/arrayprint.py:510) (12 samples, 0.27%)</title><rect x="90.9131%" y="164" width="0.2673%" height="15" fill="rgb(240,68,47)" fg:x="4082" fg:w="12"/><text x="91.1631%" y="174.50"></text></g><g><title>_formatArray (numpy/core/arrayprint.py:853) (11 samples, 0.24%)</title><rect x="90.9354%" y="180" width="0.2450%" height="15" fill="rgb(210,16,53)" fg:x="4083" fg:w="11"/><text x="91.1854%" y="190.50"></text></g><g><title>recurser (numpy/core/arrayprint.py:815) (7 samples, 0.16%)</title><rect x="91.0245%" y="196" width="0.1559%" height="15" fill="rgb(235,124,12)" fg:x="4087" fg:w="7"/><text x="91.2745%" y="206.50"></text></g><g><title>recurser (numpy/core/arrayprint.py:761) (6 samples, 0.13%)</title><rect x="91.0468%" y="212" width="0.1336%" height="15" fill="rgb(224,169,11)" fg:x="4088" fg:w="6"/><text x="91.2968%" y="222.50"></text></g><g><title>__call__ (numpy/core/arrayprint.py:981) (5 samples, 0.11%)</title><rect x="91.0690%" y="228" width="0.1114%" height="15" fill="rgb(250,166,2)" fg:x="4089" fg:w="5"/><text x="91.3190%" y="238.50"></text></g><g><title>update (detector.py:470) (787 samples, 17.53%)</title><rect x="73.8307%" y="84" width="17.5278%" height="15" fill="rgb(242,216,29)" fg:x="3315" fg:w="787"/><text x="74.0807%" y="94.50">update (detector.py:470)</text></g><g><title>update (detector.py:482) (77 samples, 1.71%)</title><rect x="91.3586%" y="84" width="1.7149%" height="15" fill="rgb(230,116,27)" fg:x="4102" fg:w="77"/><text x="91.6086%" y="94.50"></text></g><g><title>all (4,490 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(228,99,48)" fg:x="0" fg:w="4490"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (detector.py:555) (4,451 samples, 99.13%)</title><rect x="0.8686%" y="68" width="99.1314%" height="15" fill="rgb(253,11,6)" fg:x="39" fg:w="4451"/><text x="1.1186%" y="78.50">&lt;module&gt; (detector.py:555)</text></g><g><title>update (detector.py:483) (311 samples, 6.93%)</title><rect x="93.0735%" y="84" width="6.9265%" height="15" fill="rgb(247,143,39)" fg:x="4179" fg:w="311"/><text x="93.3235%" y="94.50">update (d..</text></g></svg></svg>